{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["chouzaIndexInicio","moment","startOf","tasasPlazoFijo","App","props","state","modalAbout","modalDatos","registros","toggleAboutModal","bind","toggleDatosModal","this","setState","dias","tasaCorrespondiente","Math","floor","$","data","slice","map","registro","fecha","cierre","Number","ahorro","indice","filter","isAfter","forEach","r","i","a","tasa","round","Chart","type","labels","format","datasets","backgroundColor","borderColor","label","fill","hidden","indiceHoy","length","frenteDolar","Container","Row","className","Col","Toast","ToastHeader","ToastBody","id","width","height","Button","color","outline","onClick","Modal","size","isOpen","toggle","ModalHeader","ModalBody","title","Badge","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f0a187e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport * as $ from \"jquery\";\nimport moment from \"moment\";\nimport {Chart} from \"chart.js\";\nimport { Container, Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Button, Badge, Card, CardTitle, CardText, Toast, ToastHeader, ToastBody } from \"reactstrap\";\nimport { threadId } from 'worker_threads';\n\n/**\n * El Twit es del 2 de Mayo, por eso agarramos todas las cotizaciones desde entonces.\n */\nconst chouzaIndexInicio = moment(\"01-05-2020\", \"DD-MM-YYYY\").startOf('day');\n\nconst tasasPlazoFijo = [\n  26.6, // Correspondiente al 02-05-2020\n  30.02, // Correspondiente al 02-06-2020\n  30.02, // Correspondiente al 02-07-2020\n  33.06, // Correspondiente al 02-08-2020\n  33.06, // Correspondiente al 02-09-2020\n  33.06, // Correspondiente al 02-10-2020\n  33.06, // Correspondiente al 02-11-2020\n  33.06, // Correspondiente al 02-12-2020\n]\n\ninterface IAppState extends React.ClassAttributes<App> {\n  modalAbout: boolean;\n  modalDatos: boolean;\n  registros: any[];\n};\n\nclass App extends React.Component<any, IAppState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      modalAbout: false,\n      modalDatos: false,\n      registros: [],\n    }\n    this.toggleAboutModal = this.toggleAboutModal.bind(this);\n    this.toggleDatosModal = this.toggleDatosModal.bind(this);\n  }\n\n  toggleAboutModal() {\n    this.setState({\n      modalAbout: !this.state.modalAbout,\n    });\n  }\n\n  toggleDatosModal() {\n    this.setState({\n      modalDatos: !this.state.modalDatos,\n    })\n  }\n\n  tasaCorrespondiente(dias: number) {\n    const tasaCorrespondiente = Math.floor(dias/30);\n    return ((tasasPlazoFijo[tasaCorrespondiente] / 365) / 100);\n  }\n\n  componentDidMount() {\n    $.get(\"https://mercados.ambito.com//dolarrava/mep/grafico/anual\", (data: []) => {\n      const registros = data.slice(1)\n      .map((registro) => {\n        return {\n          fecha: moment(registro[0], \"DD-MM-YYYY\"),\n          cierre: Number(registro[1]),\n          ahorro: Number(registro[1]),\n          indice: Number(100),\n        };\n      })\n      .filter((registro) => registro.fecha.isAfter(chouzaIndexInicio));\n\n      registros.forEach((r, i, a) => {\n        const tasa = this.tasaCorrespondiente(i);\n        if(i === 0) {\n          a[i].ahorro = a[i].cierre;\n          return;\n        }\n\n        a[i].ahorro = a[i-1].ahorro * (1 + tasa);\n        a[i].indice = Math.round(100 * (100 * (a[i].ahorro / a[i].cierre))) / 100;\n      });\n\n      this.setState({\n        registros,\n      });\n\n      const chart = new Chart('myChart', {\n        type: 'line',\n        data: {\n          labels: registros.map((r) => r.fecha.format(\"DD-MM-YYYY\")),\n          datasets: [{\n            backgroundColor: \"rgba(255,0,0,0.25)\",\n            borderColor: \"red\",\n            label: 'Chouza Index',\n            data: registros.map((r) => r.indice),\n            fill: 'start',\n          },\n          {\n            backgroundColor: \"rgba(0,0,0,0)\",\n            borderColor: \"blue\",\n            label: 'Ahorro en Pesos',\n            data: registros.map((r) => Math.round(100 * r.ahorro) / 100),\n            hidden: true,\n          },\n          {\n            backgroundColor: \"rgba(0,0,0,0)\",\n            borderColor: \"green\",\n            label: 'Precio Dólar MEP',\n            data: registros.map((r) => Math.round(100 * r.cierre) / 100),\n            hidden: true,\n          }]\n        }\n      });\n    });\n  }\n\n  public render() {\n    const {modalAbout, modalDatos} = this.state;\n    const indiceHoy = this.state.registros.length === 0 ? 0 : this.state.registros[this.state.registros.length - 1].indice;\n    const frenteDolar = this.state.registros.length === 0 ? 0 : Math.round(100 * (indiceHoy - 100)) / 100;\n    return (\n      <Container>\n        <Row className=\"text-center\">\n          <Col>\n            <h1>Índice Chouza</h1>\n            <p><em>(o simplemente un Plazo fijo vs. Dólar)</em></p>\n          </Col>\n        </Row>\n        <Row className=\"text-center\">\n          <Col className=\"col-md-6 d-flex justify-content-center\">\n            <Toast>\n              <ToastHeader>\n                Índice hoy\n              </ToastHeader>\n              <ToastBody className={\"text-monospace text-primary\"}>\n                {indiceHoy}\n              </ToastBody>\n            </Toast>\n          </Col>\n          <Col className=\"col-md-6 d-flex justify-content-center\">\n            <Toast>\n              <ToastHeader>\n                Ahorro vs dólar\n              </ToastHeader>\n              <ToastBody className={\"text-monospace \" + (frenteDolar < 0 ? \"text-danger\" : \"text-success\")}>\n                {frenteDolar}{\"%\"}\n              </ToastBody>\n            </Toast>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"col-md-12\">\n            <canvas id=\"myChart\" width=\"100\" height=\"60\"></canvas>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"text-center\">\n           <Button color={\"primary\"} outline={true} onClick={this.toggleAboutModal}>Sobre la página</Button>\n           <Button color={\"primary\"} outline={true} onClick={this.toggleDatosModal}>Sobre el Índice</Button>\n          </Col>\n        </Row>\n        <Modal size=\"lg\" isOpen={modalAbout} toggle={this.toggleAboutModal}>\n          <ModalHeader toggle={this.toggleAboutModal}>¿Qué es esto?</ModalHeader>\n          <ModalBody>\n          <blockquote className=\"blockquote text-center\">\n            <p className=\"mb-0\">Es que partís de un error. ¿Querés ahorrar? ¡Ahorrá en pesos!</p>\n            <footer className=\"blockquote-footer\">Un economista en <cite title=\"Source Title\">Twitter</cite></footer>\n          </blockquote>\n          La humilde idea de esta página es mostrar  qué hubiese pasado si un ciudadano argentino promedio hubiese leído ese twit y hubiese decidido hacer un plazo fijo en pesos a la tasa del momento (dicho twit es del 2 de Mayo de 2020, corresponde la TNA de 26,6%) y compararlo contra la evolución del dólar más libre que exista en el momento (el dólar MEP es en este caso).\n          </ModalBody>\n        </Modal>\n        <Modal size=\"lg\" isOpen={modalDatos} toggle={this.toggleDatosModal}>\n          <ModalHeader toggle={this.toggleDatosModal}>¿Qué significa este índice?</ModalHeader>\n          <ModalBody>\n            <p>El índice lo que hacer es comparar un ahorro en pesos y ver su evolución diaria al haber hecho un plazo fijo, y eso compararlo con el mismo ahorro pero si hubiese comprado dólar MEP.</p>\n            <p>Si <Badge color=\"secondary\">Índice Chouza=100</Badge> significa que hubiese sido lo mismo hacer un plazo fijo que haber comprado dólares.</p>\n            <p>Si <Badge color=\"success\">Índice Chouza{\">\"}100</Badge>, significa que el ahorro en pesos creció más que si se hubiese dolarizado</p>\n            <p>Si <Badge color=\"danger\">Índice Chouza{\"<\"}100</Badge>, significa que ese ahorro en plazo fijo fue un error, ya que hubiese sido mejor comprar dólar MEP.</p>\n            <p>Los datos del dólar MEP es información pública de <a href=\"https://www.ambito.com/\">Ambito.com</a>, y el ahorro en pesos se calcula diariamente en base al plazo fijo realizado el 2 de Mayo de 2020</p>\n          </ModalBody>\n        </Modal>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}