{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["chouzaIndexInicio","moment","startOf","tasasPlazoFijo","App","props","state","modalAbout","modalDatos","registros","toggleAboutModal","bind","toggleDatosModal","this","setState","meses","$","data","slice","map","registro","fecha","cierre","Number","ahorro","indice","filter","isAfter","date","diff","forEach","r","i","a","tasa","tasaMensual","length","diasDesdeElPF","parseFloat","toFixed","console","log","Chart","type","labels","format","datasets","backgroundColor","borderColor","label","fill","lineTension","Math","round","hidden","indiceHoy","frenteDolar","Container","Row","className","Col","Toast","ToastHeader","ToastBody","id","width","height","Button","color","outline","onClick","Modal","size","isOpen","toggle","ModalHeader","ModalBody","title","Badge","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.321886c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport * as $ from \"jquery\";\r\nimport moment from \"moment\";\r\nimport {Chart} from \"chart.js\";\r\nimport { Container, Row, Col, Modal, ModalHeader, ModalBody, ModalFooter, Button, Badge, Card, CardTitle, CardText, Toast, ToastHeader, ToastBody } from \"reactstrap\";\r\nimport { threadId } from 'worker_threads';\r\n\r\n/**\r\n * El Twit es del 2 de Mayo, por eso agarramos todas las cotizaciones desde entonces.\r\n */\r\nconst chouzaIndexInicio = moment(\"01-05-2020\", \"DD-MM-YYYY\").startOf('day');\r\n\r\nconst tasasPlazoFijo = [\r\n  26.6, // Correspondiente al 02-05-2020\r\n  30.02, // Correspondiente al 02-06-2020\r\n  30.02, // Correspondiente al 02-07-2020\r\n  33.06, // Correspondiente al 02-08-2020\r\n  33.06, // Correspondiente al 02-09-2020\r\n  34.00, // Correspondiente al 02-10-2020\r\n  34.00, // Correspondiente al 02-11-2020\r\n  37.00, // Correspondiente al 02-12-2020\r\n  37.00, // Correspondiente al 02-01-2021\r\n  37.00, // Correspondiente al 02-02-2021\r\n  37.00, // Correspondiente al 02-03-2021\r\n]\r\n\r\ninterface IAppState extends React.ClassAttributes<App> {\r\n  modalAbout: boolean;\r\n  modalDatos: boolean;\r\n  registros: any[];\r\n};\r\n\r\nclass App extends React.Component<any, IAppState> {\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      modalAbout: false,\r\n      modalDatos: false,\r\n      registros: [],\r\n    }\r\n    this.toggleAboutModal = this.toggleAboutModal.bind(this);\r\n    this.toggleDatosModal = this.toggleDatosModal.bind(this);\r\n  }\r\n\r\n  toggleAboutModal() {\r\n    this.setState({\r\n      modalAbout: !this.state.modalAbout,\r\n    });\r\n  }\r\n\r\n  toggleDatosModal() {\r\n    this.setState({\r\n      modalDatos: !this.state.modalDatos,\r\n    })\r\n  }\r\n\r\n  tasaMensual(meses: number) {\r\n    const indiceTasa = meses - 1;\r\n    return ((tasasPlazoFijo[indiceTasa] / 12) / 100);\r\n  }\r\n\r\n  componentDidMount() {\r\n    $.get(\"https://mercados.ambito.com//dolarrava/mep/grafico/anual\", (data: []) => {\r\n      const registros = data.slice(1)\r\n      .map((registro) => {\r\n        return {\r\n          fecha: moment(registro[0], \"DD-MM-YYYY\"),\r\n          cierre: Number(registro[1]),\r\n          ahorro: Number(registro[1]),\r\n          indice: Number(100),\r\n        };\r\n      })\r\n      .filter((registro) => registro.fecha.isAfter(chouzaIndexInicio) && (registro.fecha.date() === 2 || registro.fecha.diff(moment(), \"days\") === 0));\r\n      registros.forEach((r, i, a) => {\r\n        let tasa = this.tasaMensual(i);\r\n        if(i === 0) {\r\n          a[i].ahorro = a[i].cierre;\r\n          a[i].indice = a[i].ahorro / a[i].cierre * 100;\r\n          return;\r\n        }\r\n        // Cuando esta en \"Hoy\"\r\n        if(i === a.length - 1) {\r\n          const diasDesdeElPF = moment().diff(a[i-1].fecha, \"days\");\r\n          tasa = this.tasaMensual(i) / 30 * diasDesdeElPF;\r\n        }\r\n\r\n        a[i].ahorro = a[i-1].ahorro * (1 + tasa);\r\n        a[i].indice = parseFloat((100 * (a[i].ahorro / a[i].cierre)).toFixed(2));\r\n      });\r\n      console.log(registros);\r\n      this.setState({\r\n        registros,\r\n      });\r\n\r\n      const chart = new Chart('myChart', {\r\n        type: 'line',\r\n        data: {\r\n          labels: registros.map((r, i, a) => i === a.length - 1? r.fecha.format(\"DD-MM-YYYY\") + \" (Hoy)\" : r.fecha.format(\"DD-MM-YYYY\")),\r\n          datasets: [{\r\n            backgroundColor: \"rgba(255,0,0,0.25)\",\r\n            borderColor: \"red\",\r\n            label: 'Chouza Index',\r\n            data: registros.map((r) => r.indice),\r\n            fill: 'start',\r\n            lineTension: 0.4\r\n          },\r\n          {\r\n            backgroundColor: \"rgba(0,0,0,0)\",\r\n            borderColor: \"blue\",\r\n            label: 'Ahorro en Pesos',\r\n            data: registros.map((r) => Math.round(100 * r.ahorro) / 100),\r\n            hidden: true,\r\n          },\r\n          {\r\n            backgroundColor: \"rgba(0,0,0,0)\",\r\n            borderColor: \"green\",\r\n            label: 'Precio Dólar MEP',\r\n            data: registros.map((r) => r.cierre),\r\n            hidden: true,\r\n          }]\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    const {modalAbout, modalDatos} = this.state;\r\n    const indiceHoy = this.state.registros.length === 0 ? 0 : this.state.registros[this.state.registros.length - 1].indice;\r\n    const frenteDolar = this.state.registros.length === 0 ? 0 : Math.round(100 * (indiceHoy - 100)) / 100;\r\n    return (\r\n      <Container>\r\n        <Row className=\"text-center\">\r\n          <Col>\r\n            <h1>Índice Chouza</h1>\r\n            <p><em>(o simplemente un Plazo fijo vs. Dólar)</em></p>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"text-center\">\r\n          <Col className=\"col-md-6 d-flex justify-content-center\">\r\n            <Toast>\r\n              <ToastHeader>\r\n                Índice hoy\r\n              </ToastHeader>\r\n              <ToastBody className={\"text-monospace text-primary\"}>\r\n                {indiceHoy}\r\n              </ToastBody>\r\n            </Toast>\r\n          </Col>\r\n          <Col className=\"col-md-6 d-flex justify-content-center\">\r\n            <Toast>\r\n              <ToastHeader>\r\n                Ahorro vs dólar\r\n              </ToastHeader>\r\n              <ToastBody className={\"text-monospace \" + (frenteDolar < 0 ? \"text-danger\" : \"text-success\")}>\r\n                {frenteDolar}{\"%\"}\r\n              </ToastBody>\r\n            </Toast>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className=\"col-md-12\">\r\n            <canvas id=\"myChart\" width=\"100\" height=\"60\"></canvas>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className=\"text-center\">\r\n           <Button color={\"primary\"} outline={true} onClick={this.toggleAboutModal}>Sobre la página</Button>\r\n           <Button color={\"primary\"} outline={true} onClick={this.toggleDatosModal}>Sobre el Índice</Button>\r\n          </Col>\r\n        </Row>\r\n        <Modal size=\"lg\" isOpen={modalAbout} toggle={this.toggleAboutModal}>\r\n          <ModalHeader toggle={this.toggleAboutModal}>¿Qué es esto?</ModalHeader>\r\n          <ModalBody>\r\n          <blockquote className=\"blockquote text-center\">\r\n            <p className=\"mb-0\">Es que partís de un error. ¿Querés ahorrar? ¡Ahorrá en pesos!</p>\r\n            <footer className=\"blockquote-footer\">Un economista en <cite title=\"Source Title\">Twitter</cite></footer>\r\n          </blockquote>\r\n          La humilde idea de esta página es mostrar  qué hubiese pasado si un ciudadano argentino promedio hubiese leído ese twit y hubiese decidido hacer un plazo fijo en pesos a la tasa del momento (dicho twit es del 2 de Mayo de 2020, corresponde la TNA de 26,6%) y compararlo contra la evolución del dólar más libre que exista en el momento (el dólar MEP es en este caso).\r\n          </ModalBody>\r\n        </Modal>\r\n        <Modal size=\"lg\" isOpen={modalDatos} toggle={this.toggleDatosModal}>\r\n          <ModalHeader toggle={this.toggleDatosModal}>¿Qué significa este índice?</ModalHeader>\r\n          <ModalBody>\r\n            <p>El índice lo que hacer es comparar un ahorro en pesos y ver su evolución mensual al haber hecho un plazo fijo, y eso compararlo con el mismo ahorro pero si hubiese comprado dólar MEP.</p>\r\n            <p>Si <Badge color=\"secondary\">Índice Chouza=100</Badge> significa que hubiese sido lo mismo hacer un plazo fijo que haber comprado dólares.</p>\r\n            <p>Si <Badge color=\"success\">Índice Chouza{\">\"}100</Badge>, significa que el ahorro en pesos creció más que si se hubiese dolarizado</p>\r\n            <p>Si <Badge color=\"danger\">Índice Chouza{\"<\"}100</Badge>, significa que ese ahorro en plazo fijo fue un error, ya que hubiese sido mejor comprar dólar MEP.</p>\r\n            <p>Los datos del dólar MEP es información pública de <a href=\"https://www.ambito.com/\">Ambito.com</a>, y el ahorro en pesos se calcula diariamente en base al plazo fijo realizado el 2 de Mayo de 2020</p>\r\n          </ModalBody>\r\n        </Modal>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}